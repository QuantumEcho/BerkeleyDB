/* Do not edit: automatically built by dist/distrib. */
#include <sys/queue.h>
#include <sys/shqueue.h>

#include <ctype.h>
#include <stddef.h>
#include <stdlib.h>
#include <string.h>

#include "db_int.h"
#include "db_page.h"
#include "../log/log.h"
#include "db.h"
#include "../common/db_dispatch.h"
#include "../common/extern.h"

/*
 * __db_addrem_recover --
 *	Recovery function for addrem.
 *
 * PUBLIC: int __db_addrem_recover
 * PUBLIC:   __P((DB_LOG *, DBT *, DB_LSN *, int, void *));
 */
int
__db_addrem_recover(logp, dbtp, lsnp, redo, info)
	DB_LOG *logp;
	DBT *dbtp;
	DB_LSN *lsnp;
	int redo;
	void *info;
{
	__db_addrem_args *argp;
	DB *file_dbp;
	DB_MPOOLFILE *mpf;
	PAGE *pagep;
	int cmp_n, cmp_p, modified, ret;

#ifdef DEBUG_RECOVER
	(void)__db_addrem_print(logp, dbtp, lsnp, redo, info);
#endif
	info = info;				/* XXX: Shut the compiler up. */

	if ((ret = __db_addrem_read(dbtp->data, &argp)) != 0)
		goto out;
	if (__db_fileid_to_db(logp, &file_dbp, argp->fileid)) {
		ret = 0;
		goto out;
	}
	if (file_dbp == NULL)
		goto out;

	F_SET(file_dbp, DB_AM_RECOVER);
	mpf = file_dbp->mpf;

	if ((ret = memp_fget(mpf, &argp->pgno, 0, &pagep)) != 0)
		if (redo) {
			if ((ret = memp_fget(mpf,
			    &argp->pgno, DB_MPOOL_CREATE, &pagep)) != 0)
				goto out;
		} else {
			*lsnp = *argp->prev_lsn;
			ret = 0;
			goto out;
		}

	modified = 0;
	cmp_n = log_compare(lsnp, &LSN(pagep));

	/*
	 * Use this when there is something like "pagelsn" in the argp
	 * structure.  Sometimes, you might need to compare meta-data
	 * lsn's instead.
	 *
	 * cmp_p = log_compare(&LSN(pagep), argp->pagelsn);
	 */
	if (cmp_p == 0 && redo) {
		/* Need to redo update described. */
		modified = 1;
	} else if (cmp_n == 0 && !redo) {
		/* Need to undo update described. */
		modified = 1;
	}
	if (ret = memp_fput(mpf, pagep, modified ? DB_MPOOL_DIRTY : 0))
		goto out;

	*lsnp = *argp->prev_lsn;

out:	if (argp != NULL)
		free (argp);
	F_CLR(file_dbp, DB_AM_RECOVER);
	return (ret);
}

/*
 * __db_split_recover --
 *	Recovery function for split.
 *
 * PUBLIC: int __db_split_recover
 * PUBLIC:   __P((DB_LOG *, DBT *, DB_LSN *, int, void *));
 */
int
__db_split_recover(logp, dbtp, lsnp, redo, info)
	DB_LOG *logp;
	DBT *dbtp;
	DB_LSN *lsnp;
	int redo;
	void *info;
{
	__db_split_args *argp;
	DB *file_dbp;
	DB_MPOOLFILE *mpf;
	PAGE *pagep;
	int cmp_n, cmp_p, modified, ret;

#ifdef DEBUG_RECOVER
	(void)__db_split_print(logp, dbtp, lsnp, redo, info);
#endif
	info = info;				/* XXX: Shut the compiler up. */

	if ((ret = __db_split_read(dbtp->data, &argp)) != 0)
		goto out;
	if (__db_fileid_to_db(logp, &file_dbp, argp->fileid)) {
		ret = 0;
		goto out;
	}
	if (file_dbp == NULL)
		goto out;

	F_SET(file_dbp, DB_AM_RECOVER);
	mpf = file_dbp->mpf;

	if ((ret = memp_fget(mpf, &argp->pgno, 0, &pagep)) != 0)
		if (redo) {
			if ((ret = memp_fget(mpf,
			    &argp->pgno, DB_MPOOL_CREATE, &pagep)) != 0)
				goto out;
		} else {
			*lsnp = *argp->prev_lsn;
			ret = 0;
			goto out;
		}

	modified = 0;
	cmp_n = log_compare(lsnp, &LSN(pagep));

	/*
	 * Use this when there is something like "pagelsn" in the argp
	 * structure.  Sometimes, you might need to compare meta-data
	 * lsn's instead.
	 *
	 * cmp_p = log_compare(&LSN(pagep), argp->pagelsn);
	 */
	if (cmp_p == 0 && redo) {
		/* Need to redo update described. */
		modified = 1;
	} else if (cmp_n == 0 && !redo) {
		/* Need to undo update described. */
		modified = 1;
	}
	if (ret = memp_fput(mpf, pagep, modified ? DB_MPOOL_DIRTY : 0))
		goto out;

	*lsnp = *argp->prev_lsn;

out:	if (argp != NULL)
		free (argp);
	F_CLR(file_dbp, DB_AM_RECOVER);
	return (ret);
}

/*
 * __db_big_recover --
 *	Recovery function for big.
 *
 * PUBLIC: int __db_big_recover
 * PUBLIC:   __P((DB_LOG *, DBT *, DB_LSN *, int, void *));
 */
int
__db_big_recover(logp, dbtp, lsnp, redo, info)
	DB_LOG *logp;
	DBT *dbtp;
	DB_LSN *lsnp;
	int redo;
	void *info;
{
	__db_big_args *argp;
	DB *file_dbp;
	DB_MPOOLFILE *mpf;
	PAGE *pagep;
	int cmp_n, cmp_p, modified, ret;

#ifdef DEBUG_RECOVER
	(void)__db_big_print(logp, dbtp, lsnp, redo, info);
#endif
	info = info;				/* XXX: Shut the compiler up. */

	if ((ret = __db_big_read(dbtp->data, &argp)) != 0)
		goto out;
	if (__db_fileid_to_db(logp, &file_dbp, argp->fileid)) {
		ret = 0;
		goto out;
	}
	if (file_dbp == NULL)
		goto out;

	F_SET(file_dbp, DB_AM_RECOVER);
	mpf = file_dbp->mpf;

	if ((ret = memp_fget(mpf, &argp->pgno, 0, &pagep)) != 0)
		if (redo) {
			if ((ret = memp_fget(mpf,
			    &argp->pgno, DB_MPOOL_CREATE, &pagep)) != 0)
				goto out;
		} else {
			*lsnp = *argp->prev_lsn;
			ret = 0;
			goto out;
		}

	modified = 0;
	cmp_n = log_compare(lsnp, &LSN(pagep));

	/*
	 * Use this when there is something like "pagelsn" in the argp
	 * structure.  Sometimes, you might need to compare meta-data
	 * lsn's instead.
	 *
	 * cmp_p = log_compare(&LSN(pagep), argp->pagelsn);
	 */
	if (cmp_p == 0 && redo) {
		/* Need to redo update described. */
		modified = 1;
	} else if (cmp_n == 0 && !redo) {
		/* Need to undo update described. */
		modified = 1;
	}
	if (ret = memp_fput(mpf, pagep, modified ? DB_MPOOL_DIRTY : 0))
		goto out;

	*lsnp = *argp->prev_lsn;

out:	if (argp != NULL)
		free (argp);
	F_CLR(file_dbp, DB_AM_RECOVER);
	return (ret);
}

/*
 * __db_ovref_recover --
 *	Recovery function for ovref.
 *
 * PUBLIC: int __db_ovref_recover
 * PUBLIC:   __P((DB_LOG *, DBT *, DB_LSN *, int, void *));
 */
int
__db_ovref_recover(logp, dbtp, lsnp, redo, info)
	DB_LOG *logp;
	DBT *dbtp;
	DB_LSN *lsnp;
	int redo;
	void *info;
{
	__db_ovref_args *argp;
	DB *file_dbp;
	DB_MPOOLFILE *mpf;
	PAGE *pagep;
	int cmp_n, cmp_p, modified, ret;

#ifdef DEBUG_RECOVER
	(void)__db_ovref_print(logp, dbtp, lsnp, redo, info);
#endif
	info = info;				/* XXX: Shut the compiler up. */

	if ((ret = __db_ovref_read(dbtp->data, &argp)) != 0)
		goto out;
	if (__db_fileid_to_db(logp, &file_dbp, argp->fileid)) {
		ret = 0;
		goto out;
	}
	if (file_dbp == NULL)
		goto out;

	F_SET(file_dbp, DB_AM_RECOVER);
	mpf = file_dbp->mpf;

	if ((ret = memp_fget(mpf, &argp->pgno, 0, &pagep)) != 0)
		if (redo) {
			if ((ret = memp_fget(mpf,
			    &argp->pgno, DB_MPOOL_CREATE, &pagep)) != 0)
				goto out;
		} else {
			*lsnp = *argp->prev_lsn;
			ret = 0;
			goto out;
		}

	modified = 0;
	cmp_n = log_compare(lsnp, &LSN(pagep));

	/*
	 * Use this when there is something like "pagelsn" in the argp
	 * structure.  Sometimes, you might need to compare meta-data
	 * lsn's instead.
	 *
	 * cmp_p = log_compare(&LSN(pagep), argp->pagelsn);
	 */
	if (cmp_p == 0 && redo) {
		/* Need to redo update described. */
		modified = 1;
	} else if (cmp_n == 0 && !redo) {
		/* Need to undo update described. */
		modified = 1;
	}
	if (ret = memp_fput(mpf, pagep, modified ? DB_MPOOL_DIRTY : 0))
		goto out;

	*lsnp = *argp->prev_lsn;

out:	if (argp != NULL)
		free (argp);
	F_CLR(file_dbp, DB_AM_RECOVER);
	return (ret);
}

/*
 * __db_relink_recover --
 *	Recovery function for relink.
 *
 * PUBLIC: int __db_relink_recover
 * PUBLIC:   __P((DB_LOG *, DBT *, DB_LSN *, int, void *));
 */
int
__db_relink_recover(logp, dbtp, lsnp, redo, info)
	DB_LOG *logp;
	DBT *dbtp;
	DB_LSN *lsnp;
	int redo;
	void *info;
{
	__db_relink_args *argp;
	DB *file_dbp;
	DB_MPOOLFILE *mpf;
	PAGE *pagep;
	int cmp_n, cmp_p, modified, ret;

#ifdef DEBUG_RECOVER
	(void)__db_relink_print(logp, dbtp, lsnp, redo, info);
#endif
	info = info;				/* XXX: Shut the compiler up. */

	if ((ret = __db_relink_read(dbtp->data, &argp)) != 0)
		goto out;
	if (__db_fileid_to_db(logp, &file_dbp, argp->fileid)) {
		ret = 0;
		goto out;
	}
	if (file_dbp == NULL)
		goto out;

	F_SET(file_dbp, DB_AM_RECOVER);
	mpf = file_dbp->mpf;

	if ((ret = memp_fget(mpf, &argp->pgno, 0, &pagep)) != 0)
		if (redo) {
			if ((ret = memp_fget(mpf,
			    &argp->pgno, DB_MPOOL_CREATE, &pagep)) != 0)
				goto out;
		} else {
			*lsnp = *argp->prev_lsn;
			ret = 0;
			goto out;
		}

	modified = 0;
	cmp_n = log_compare(lsnp, &LSN(pagep));

	/*
	 * Use this when there is something like "pagelsn" in the argp
	 * structure.  Sometimes, you might need to compare meta-data
	 * lsn's instead.
	 *
	 * cmp_p = log_compare(&LSN(pagep), argp->pagelsn);
	 */
	if (cmp_p == 0 && redo) {
		/* Need to redo update described. */
		modified = 1;
	} else if (cmp_n == 0 && !redo) {
		/* Need to undo update described. */
		modified = 1;
	}
	if (ret = memp_fput(mpf, pagep, modified ? DB_MPOOL_DIRTY : 0))
		goto out;

	*lsnp = *argp->prev_lsn;

out:	if (argp != NULL)
		free (argp);
	F_CLR(file_dbp, DB_AM_RECOVER);
	return (ret);
}

/*
 * __db_addpage_recover --
 *	Recovery function for addpage.
 *
 * PUBLIC: int __db_addpage_recover
 * PUBLIC:   __P((DB_LOG *, DBT *, DB_LSN *, int, void *));
 */
int
__db_addpage_recover(logp, dbtp, lsnp, redo, info)
	DB_LOG *logp;
	DBT *dbtp;
	DB_LSN *lsnp;
	int redo;
	void *info;
{
	__db_addpage_args *argp;
	DB *file_dbp;
	DB_MPOOLFILE *mpf;
	PAGE *pagep;
	int cmp_n, cmp_p, modified, ret;

#ifdef DEBUG_RECOVER
	(void)__db_addpage_print(logp, dbtp, lsnp, redo, info);
#endif
	info = info;				/* XXX: Shut the compiler up. */

	if ((ret = __db_addpage_read(dbtp->data, &argp)) != 0)
		goto out;
	if (__db_fileid_to_db(logp, &file_dbp, argp->fileid)) {
		ret = 0;
		goto out;
	}
	if (file_dbp == NULL)
		goto out;

	F_SET(file_dbp, DB_AM_RECOVER);
	mpf = file_dbp->mpf;

	if ((ret = memp_fget(mpf, &argp->pgno, 0, &pagep)) != 0)
		if (redo) {
			if ((ret = memp_fget(mpf,
			    &argp->pgno, DB_MPOOL_CREATE, &pagep)) != 0)
				goto out;
		} else {
			*lsnp = *argp->prev_lsn;
			ret = 0;
			goto out;
		}

	modified = 0;
	cmp_n = log_compare(lsnp, &LSN(pagep));

	/*
	 * Use this when there is something like "pagelsn" in the argp
	 * structure.  Sometimes, you might need to compare meta-data
	 * lsn's instead.
	 *
	 * cmp_p = log_compare(&LSN(pagep), argp->pagelsn);
	 */
	if (cmp_p == 0 && redo) {
		/* Need to redo update described. */
		modified = 1;
	} else if (cmp_n == 0 && !redo) {
		/* Need to undo update described. */
		modified = 1;
	}
	if (ret = memp_fput(mpf, pagep, modified ? DB_MPOOL_DIRTY : 0))
		goto out;

	*lsnp = *argp->prev_lsn;

out:	if (argp != NULL)
		free (argp);
	F_CLR(file_dbp, DB_AM_RECOVER);
	return (ret);
}

/*
 * __db_debug_recover --
 *	Recovery function for debug.
 *
 * PUBLIC: int __db_debug_recover
 * PUBLIC:   __P((DB_LOG *, DBT *, DB_LSN *, int, void *));
 */
int
__db_debug_recover(logp, dbtp, lsnp, redo, info)
	DB_LOG *logp;
	DBT *dbtp;
	DB_LSN *lsnp;
	int redo;
	void *info;
{
	__db_debug_args *argp;
	DB *file_dbp;
	DB_MPOOLFILE *mpf;
	PAGE *pagep;
	int cmp_n, cmp_p, modified, ret;

#ifdef DEBUG_RECOVER
	(void)__db_debug_print(logp, dbtp, lsnp, redo, info);
#endif
	info = info;				/* XXX: Shut the compiler up. */

	if ((ret = __db_debug_read(dbtp->data, &argp)) != 0)
		goto out;
	if (__db_fileid_to_db(logp, &file_dbp, argp->fileid)) {
		ret = 0;
		goto out;
	}
	if (file_dbp == NULL)
		goto out;

	F_SET(file_dbp, DB_AM_RECOVER);
	mpf = file_dbp->mpf;

	if ((ret = memp_fget(mpf, &argp->pgno, 0, &pagep)) != 0)
		if (redo) {
			if ((ret = memp_fget(mpf,
			    &argp->pgno, DB_MPOOL_CREATE, &pagep)) != 0)
				goto out;
		} else {
			*lsnp = *argp->prev_lsn;
			ret = 0;
			goto out;
		}

	modified = 0;
	cmp_n = log_compare(lsnp, &LSN(pagep));

	/*
	 * Use this when there is something like "pagelsn" in the argp
	 * structure.  Sometimes, you might need to compare meta-data
	 * lsn's instead.
	 *
	 * cmp_p = log_compare(&LSN(pagep), argp->pagelsn);
	 */
	if (cmp_p == 0 && redo) {
		/* Need to redo update described. */
		modified = 1;
	} else if (cmp_n == 0 && !redo) {
		/* Need to undo update described. */
		modified = 1;
	}
	if (ret = memp_fput(mpf, pagep, modified ? DB_MPOOL_DIRTY : 0))
		goto out;

	*lsnp = *argp->prev_lsn;

out:	if (argp != NULL)
		free (argp);
	F_CLR(file_dbp, DB_AM_RECOVER);
	return (ret);
}
